<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<!-- 加载properties文件 -->
	<bean id="propertiesConfigurerForMybatis"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!-- 使用多个PropertyPlaceholderConfigurer的bean时，需要指定不同的加载顺序 ,ignoreUnresolvablePlaceholders也要设置为true -->
		<property name="order" value="1" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="locations"> <!-- PropertyPlaceholderConfigurer类中有个locations属性，接收的是一个数组，即我们可以在下面配好多个properties文件 -->
			<array>
				<value>classpath:property/jdbc-mysql.properties</value>
			</array>
		</property>
	</bean>

	<!-- 配置mybatis -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.driverClassName}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="1" />
		<!-- 连接池最大使用链接数量 -->
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="10000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="testWhileIdle" value="true" />
		<!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果是mysql数据库此配置设为false,oracle为true -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
		<!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->
		<property name="defaultAutoCommit" value="true" />
		<!-- 验证连接有效与否的SQL，不同的数据配置不同，mysql是select 1，oracle是select 1 from dual -->
		<property name="validationQuery" value="select 1 " />
		<!-- druid监控过滤器 -->
		<property name="filters" value="stat" />
	</bean>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
		<!-- 当mybatis的xml文件和mapper接口不在相同包下时，需要用mapperLocations属性指定xml文件的路径，*是个通配符，代表所有的文件，**表示迭代查找 -->
		<property name="mapperLocations" value="classpath:xyz.zeling/**/*.xml" />
	</bean>
	<!-- 这个类负责管理 MyBatis 的 SqlSession, 调用 MyBatis 的 SQL 方法, 翻译异常 -->
	<!-- 非事务环境下，每次操作数据库都使用新的sqlSession对象。因此mybatis的一级缓存无法使用 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<!--mapper扫描器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="xyz.zeling" />
		<!-- 如果只有一个数据源的话可以不用指定，但是如果有多个数据源的话必须要指定 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate" />
	</bean>
	<!-- 事务 -->
	<!-- 事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 事务相关控制配置：例如配置事务的传播机制，如果回滚等 -->
	<tx:advice id="mybatisTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 任何 RuntimeException{java.lang.RuntimeException,java.lang.Error} 将触发事务回滚，但是任何 
				checked Exception{java.lang.Exception} 将不触发事务回滚 。如果一个异常同时作用于rollback-for和no-rollback-for,那么将触发rollback-for。基于默认回滚策略的话，方法中需要显示处理RuntimeException -->
			<!-- 增 -->
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" />
			<tx:method name="add*" propagation="REQUIRED" read-only="false" />
			<!-- 删 -->
			<tx:method name="del*" propagation="REQUIRED" read-only="false" />
			<!-- 查 -->
			<!-- 配置上只读，有一些优化 -->
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="query*" propagation="REQUIRED" read-only="true" />
			<!-- 改 -->
			<tx:method name="update*" propagation="REQUIRED" read-only="false" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- execution(modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern)throws-pattern?) -->
		<!-- ret-type-pattern：可以为*表示任何返回值,全路径的类名等. -->
		<!-- name-pattern：指定方法名-->
		<!-- param-pattern：指定方法参数 -->
		<!-- 'execution(* xyz.zeling..*Service.*(..))'xyz.zeling包下及其子包下所有的以Service结尾的类中的任意方法 -->
		<aop:pointcut expression="execution(* xyz.zeling..*Service.*(..))" id="mybatisInterceptorPointCut" />
		<aop:advisor advice-ref="mybatisTxAdvice" pointcut-ref="mybatisInterceptorPointCut" />
	</aop:config>
</beans>
