<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">
	<!-- 设置密码加密策略:MD5+salt -->
	<bean id="customCredentialsMatcher"
		class="xyz.zeling.ssmconfig.modules.shiro.CustomCredentialsMatcher" />
		
	<!-- Define the Shiro Realm implementation you want to use to connect to 
		your back-end security datasource: -->
	<bean id="userRrealm" class="xyz.zeling.ssmconfig.modules.shiro.UserRrealm">
		<!-- 自定义密码加密算法 -->
		<property name="credentialsMatcher" ref="customCredentialsMatcher" />
	</bean>
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app. If you have multiple realms, use the 'realms' property 
			instead. -->
		<property name="realm" ref="userRrealm" />
		<!-- By default the servlet container sessions will be used. Uncomment 
			this line to use shiro's native sessions (see the JavaDoc for more): -->
		<!-- <property name="sessionMode" value="native"/> -->
	</bean>
	
	<!-- For simplest integration, so that all SecurityUtils.* methods work 
		in all cases, make the securityManager bean a static singleton. DO NOT do 
		this in web applications - see the 'Web Applications' section below instead. -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>
	
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- override these for application-specific URLs if you like: -->
		<property name="loginUrl" value="shiro/login.jsp" />
		<property name="successUrl" value="shiro/main.jsp" />
		<property name="unauthorizedUrl" value="shiro/unauthorized.jsp" />
		<!-- The 'filters' property is not necessary since any declared javax.servlet.Filter 
			bean defined will be automatically acquired and available via its beanName 
			in chain definitions, but you can perform instance overrides or name aliases 
			here if you like: -->
		<!-- <property name="filters">
			<util:map>
				<entry key="anAlias" value-ref="someFilter" />
			</util:map>
		</property> -->
		<property name="filterChainDefinitions">
			<value>
				# some example chain definitions:
				/admin/** = authc,
				roles[admin]
				/docs/** = authc, perms[document:read]
				/** = authc
				# more
				URL-to-FilterChain definitions here
			</value>
		</property>
	</bean>
	<!-- 管理shiro生命周期 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	<!-- Define any javax.servlet.Filter beans you want anywhere in this application 
		context. They will automatically be acquired by the 'shiroFilter' bean above 
		and made available to the 'filterChainDefinitions' property. Or you can manually/explicitly 
		add them to the shiroFilter's 'filters' Map if desired. See its JavaDoc for 
		more details. -->
	<!-- <bean id="someFilter" class="..."/> -->
	<!-- <bean id="anotherFilter" class="..."> ... </bean> -->
</beans>
