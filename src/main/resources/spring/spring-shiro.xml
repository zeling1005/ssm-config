<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	<!-- session管理配置 -->
	<!-- 定义Session ID生成管理器 --> 
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />
	<!-- 配置Session DAO的操作处理 -->
	<bean id="sessionDAO"
		class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<!-- 设置session缓存的名字，这个名字可以任意 -->
		<property name="activeSessionsCacheName" value="${ehcache.old.shiroSessionDaoCacheName}" />
		<!-- 定义该Session DAO操作中所使用的ID生成器 -->
		<property name="sessionIdGenerator" ref="sessionIdGenerator" />
	</bean>
	<!-- 缓存配置 -->
	<bean id="shiroEhcacheCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager">
			<ref bean="${ehcache.old.cacheManagerBeanName}"/>
		</property>
	</bean>
	<!-- 配置需要向Cookie中保存数据的配置模版 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- 在Tomcat运行下默认使用的Cookie的名字为JSESSIONID -->
		<constructor-arg value="shiroSessionId" />
		<!-- 保证该系统不会受到跨域的脚本操作供给 -->
		<property name="httpOnly" value="true" />
		<!-- 定义Cookie的过期时间，单位为秒，如果设置为-1表示浏览器关闭，则Cookie消失 -->
		<property name="maxAge" value="-1" />
	</bean>
	<!-- session 状态监听 -->
	<bean id="sessionListener" class="xyz.zeling.ssmconfig.modules.shiro.ShiroSessionListener" />
	<!-- 定义会话管理器的操作 -->
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 定义的是全局的session会话超时时间，此操作会覆盖web.xml文件中的超时时间配置，十分钟超时 -->
		<property name="globalSessionTimeout" value="600000" />
		<!-- 删除所有无效的Session对象，此时的session被保存在了内存里面 -->
		<property name="deleteInvalidSessions" value="true" />
		<!-- 使用默认清理器，定时清理失效会话, 清理用户直接关闭浏览器造成的孤立会话 -->
		<property name="sessionValidationInterval" value="600000" />
		<!-- 自定义要使用的无效的Session定时调度器 -->
		<!-- <property name="sessionValidationScheduler" ref="sessionValidationScheduler" /> -->
		<!-- 需要让此session可以使用该定时调度器进行检测 -->
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<!-- 定义Session可以进行序列化的工具类 -->
		<property name="sessionDAO" ref="sessionDAO" />
		<!-- 所有的session一定要将id设置到Cookie之中，需要提供有Cookie的操作模版 -->
		<property name="sessionIdCookie" ref="sessionIdCookie" />
		<!-- 定义sessionIdCookie模版可以进行操作的启用 -->
		<property name="sessionIdCookieEnabled" value="true" />
		<property name="sessionListeners">
			<list>
				<ref bean="sessionListener"/>
			</list>
		</property>
	</bean>
	<!-- 配置session的定时验证检测程序类，以让无效的session释放 -->
    <!-- <bean id="sessionValidationScheduler"
        class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <property name="sessionValidationInterval" value="100000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>  -->
	
	<!-- 设置密码加密策略:MD5+salt -->
	<bean id="customCredentialsMatcher"
		class="xyz.zeling.ssmconfig.modules.shiro.CustomCredentialsMatcher" />

	<!-- Define the Shiro Realm implementation you want to use to connect to 
		your back-end security datasource: -->
	<bean id="userRrealm" class="xyz.zeling.ssmconfig.modules.shiro.UserRrealm">
		<!-- 自定义密码加密算法 -->
		<property name="credentialsMatcher" ref="customCredentialsMatcher" />
		<property name="cachingEnabled" value="true" />
		<property name="authenticationCachingEnabled" value="true" />
		<property name="authenticationCacheName" value="${ehcache.old.shiroRealmCacheName}" />
		<property name="authorizationCachingEnabled" value="true" />
		<property name="authorizationCacheName" value="${ehcache.old.shiroRealmCacheName}" />
	</bean>
	
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app. If you have multiple realms, use the 'realms' property 
			instead. -->
		<property name="realm" ref="userRrealm" />
		<property name="rememberMeManager" ref="rememberMeManager" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="cacheManager" ref="shiroEhcacheCacheManager" />
	</bean>

	<!-- For simplest integration, so that all SecurityUtils.* methods work 
		in all cases, make the securityManager bean a static singleton. DO NOT do 
		this in web applications - see the 'Web Applications' section below instead. -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>

	<!-- remember cookie -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe" />
		<!-- JavaScript脚本将无法读取到Cookie信息 -->
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="2592000" /><!-- 30天 -->
	</bean>

	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cookie" ref="rememberMeCookie" />
	</bean> 

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- override these for application-specific URLs if you like: -->
		<property name="loginUrl" value="/shiro/login" />
		<property name="successUrl" value="/shiro/loginSucc" />
		<property name="unauthorizedUrl" value="/shiro/unauthorized" />
		<!-- The 'filters' property is not necessary since any declared javax.servlet.Filter 
			bean defined will be automatically acquired and available via its beanName 
			in chain definitions, but you can perform instance overrides or name aliases 
			here if you like: -->
		<!-- <property name="filters"> <util:map> <entry key="anAlias" value-ref="someFilter" 
			/> </util:map> </property> -->
		<!-- 
		<pre>
		Filter Name	Class
		anon	org.apache.shiro.web.filter.authc.AnonymousFilter
		authc	org.apache.shiro.web.filter.authc.FormAuthenticationFilter
		authcBasic	org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter
		logout	org.apache.shiro.web.filter.authc.LogoutFilter
		noSessionCreation	org.apache.shiro.web.filter.session.NoSessionCreationFilter
		perms	org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter
		port	org.apache.shiro.web.filter.authz.PortFilter
		rest	org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter
		roles	org.apache.shiro.web.filter.authz.RolesAuthorizationFilter
		ssl	org.apache.shiro.web.filter.authz.SslFilter
		user	org.apache.shiro.web.filter.authc.UserFilter 
		</pre>
		-->
		<property name="filterChainDefinitions">
			<value>
				# some example chain definitions:
				# /admin/** = authc, roles[admin]
				# /docs/** = authc, perms[document:read]
				# /** = authc
				# more URL-to-FilterChain definitions here
				/shiro/login = anon
				/shiro/logout = anon
				/shiro/user = user
				/shiro/** = authc
				/** = anon
			</value>
		</property>
	</bean>
	
	<!-- 管理shiro生命周期 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- Define any javax.servlet.Filter beans you want anywhere in this application 
		context. They will automatically be acquired by the 'shiroFilter' bean above 
		and made available to the 'filterChainDefinitions' property. Or you can manually/explicitly 
		add them to the shiroFilter's 'filters' Map if desired. See its JavaDoc for 
		more details. -->
	<!-- <bean id="someFilter" class="..."/> -->
	<!-- <bean id="anotherFilter" class="..."> ... </bean> -->

	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after 
		the lifecycleBeanProcessor has run: -->
	<!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" 
		depends-on="lifecycleBeanPostProcessor" /> <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"> 
		<property name="securityManager" ref="securityManager" /> </bean> -->
</beans>
